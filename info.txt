dotnet --list-sdks
dotnet new wpf

Learn about HTTPS: https://aka.ms/dotnet-https
Write your first app: https://aka.ms/dotnet-hello-world
Find out what's new: https://aka.ms/dotnet-whats-new
Explore documentation: https://aka.ms/dotnet-docs
Report issues and find source on GitHub: https://github.com/dotnet/core
Use 'dotnet --help' to see available commands or visit: https://aka.ms/dotnet-cli

Removed from XAML: StartupUri="MainWindow.xaml
Startup from Apps OnStartup
Initial Components and View

Let it be toys

Align 2 ColumnDefinitions
Grid.IsSharedSizeScope="True"
SharedSizeGroup="Label"
SnapsToDevicePixels="True"

Fixed Button Annoying Highlight by overriding the default button template
Fixed Stupid borders with Grid.OpacityMask and border.

System.Runtime.CompilerServices
protected virtual void OnPropertyChanged([CallerMemberName]string propery = "")
This information helps you with tracing and debugging, and helps you to create diagnostic tools.
The following example shows how to use caller info attributes. On each call to the TraceMessage method, the caller information is inserted for the arguments to the optional parameters.

public void DoProcessing()
{
    TraceMessage("Something happened.");
}

public void TraceMessage(string message,
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0)
{
    Trace.WriteLine("message: " + message);
    Trace.WriteLine("member name: " + memberName);
    Trace.WriteLine("source file path: " + sourceFilePath);
    Trace.WriteLine("source line number: " + sourceLineNumber);
}

// Sample Output:
//  message: Something happened.
//  member name: DoProcessing
//  source file path: c:\Visual Studio Projects\CallerInfoCS\CallerInfoCS\Form1.cs
//  source line number: 31

Communication with Stores
Stores are above the VM layer

SelectedToyViewerListingItemViewModel
ToyListingItemViewModel

Add-Edit Views

Tricky Tricks:
0) CallerMemberName Trace      
		protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            Trace.WriteLine("Property Name: " + propertyName);
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

1) Ctrl + Click to unselect item and get NullReference Exception, add? : _selectedToyStore.SelectedToy = _selectedToyListingItemViewModel?.Toy;

2) Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" -> Update on textchange (text boxes works only after lodt focus)

3) <custom:Modal Panel.ZIndex="1" IsOpen="{Binding IsModalOpen}"> -> ZIndex="1" to show on the top

4) Fix Stupid Borders with OpacityMask
            <Grid>
                <Grid.OpacityMask>
                    <VisualBrush Visual="{Binding ElementName=border}" />
                </Grid.OpacityMask>
                <Border
                    x:Name="border"
                    Background="White"
                    CornerRadius="5" />
                <ListView BorderThickness="0" />
            </Grid>

5) Fix Blinking Button / Annoying Highlight with styles
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="HorizontalAlignment" Value="Center" />
                <Setter Property="TextBlock.TextAlignment" Value="Center" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border
                                Margin="{TemplateBinding Margin}"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="3">
                                <ContentPresenter />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#2a3d82"
                                        Duration="0:0:0.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <ColorAnimation
                                        Storyboard.TargetProperty="Background.(SolidColorBrush.Color)"
                                        To="#457aff"
                                        Duration="0:0:0.1" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.ExitActions>
                    </Trigger>
                </Style.Triggers>

6) Use namespace for VNs
    xmlns:vms="clr-namespace:TestMvvmApp.ViewModels"
        <DataTemplate DataType="{x:Type vms:AddToyViewModel}">
        <DataTemplate DataType="{x:Type vms:EditToyViewModel}">
		
7) Fix not closed menu
<EventSetter Event="Click" Handler="Button_Click" />
<custom:DropdownMenu x:Name="ToysListItemDropDown"
        private void Button_Click(object sender, RoutedEventArgs e)
        {
            ToysListItemDropDown.IsOpen = false;
        }